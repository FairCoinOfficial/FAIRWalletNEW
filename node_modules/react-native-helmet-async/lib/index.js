"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Helmet = Helmet;
exports.HelmetProvider = HelmetProvider;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactHelmetAsync = require("react-helmet-async");
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _reactNativeScreens = require("react-native-screens");
var _reactNavigation = require("@react-navigation/native");
var _reactNavigationStack = require("@react-navigation/stack");
var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));
var _reactNativeGestureHandler = require("react-native-gesture-handler");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) return cache.get(obj); var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc); else newObj[key] = obj[key]; } } newObj.default = obj; if (cache) cache.set(obj, newObj); return newObj; }
function HelmetProvider({
  context,
  children
}) {
  const {
    helmetContext
  } = (0, _reactHelmetAsync.HelmetProvider)({
    context
  });
  return /*#__PURE__*/_react.default.createElement(_reactHelmetAsync.HelmetProvider, {
    context: helmetContext
  }, children);
}
function Helmet({
  children
}) {
  return /*#__PURE__*/_react.default.createElement(_reactHelmetAsync.Helmet, null, children);
}
function _HelmetProvider({
  context,
  children
}) {
  const {
    helmetContext
  } = (0, _reactHelmetAsync.HelmetProvider)({
    context
  });
  return /*#__PURE__*/_react.default.createElement(_reactHelmetAsync.HelmetProvider, {
    context: helmetContext
  }, children);
}
var _default = _HelmetProvider;
exports.default = _default;
